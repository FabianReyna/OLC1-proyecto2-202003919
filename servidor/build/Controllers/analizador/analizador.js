/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,24],$V2=[1,25],$V3=[1,37],$V4=[1,38],$V5=[1,39],$V6=[1,40],$V7=[1,41],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[5,42,46,62,63,64,65,66,79,81,83,86,88,89,90,93,94,95,96,100,101,110],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,70],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[1,77],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[43,46,47,80],$VB=[7,69,70],$VC=[2,65],$VD=[1,107],$VE=[1,108],$VF=[1,109],$VG=[1,110],$VH=[1,111],$VI=[1,112],$VJ=[1,113],$VK=[1,114],$VL=[1,115],$VM=[1,116],$VN=[1,117],$VO=[1,118],$VP=[1,119],$VQ=[1,120],$VR=[1,121],$VS=[1,122],$VT=[5,7,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,48,62,63,64,65,66,69,79,81,83,86,87,88,89,90,93,94,95,96,100,101,110],$VU=[5,28,41,42,46,55,56,57,58,59,60,62,63,64,65,66,79,81,83,86,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,110],$VV=[1,145],$VW=[43,69],$VX=[28,41,42,46,55,56,57,58,59,60,102,103,104,105,107,108],$VY=[5,7,39,40,42,43,46,48,62,63,64,65,66,69,79,81,83,86,87,88,89,90,93,94,95,96,100,101,110],$VZ=[5,7,27,28,33,34,35,36,37,38,39,40,42,43,46,48,62,63,64,65,66,69,79,81,83,86,87,88,89,90,93,94,95,96,100,101,110],$V_=[5,7,27,28,29,30,33,34,35,36,37,38,39,40,42,43,46,48,62,63,64,65,66,69,79,81,83,86,87,88,89,90,93,94,95,96,100,101,110],$V$=[5,7,33,34,35,36,37,38,39,40,42,43,46,48,62,63,64,65,66,69,79,81,83,86,87,88,89,90,93,94,95,96,100,101,110],$V01=[47,74,109],$V11=[1,235],$V21=[1,246],$V31=[1,272],$V41=[48,69],$V51=[81,86,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"PUNTOCOMA":7,"DECLARACION":8,"CAST":9,"VEC":10,"MVEC":11,"SIF":12,"SSWITCH":13,"CWHILE":14,"CFOR":15,"CDOW":16,"TBREAK":17,"TCONTINUE":18,"TRETURN":19,"FUNCS":20,"METODS":21,"LLAMADA":22,"PRINTT":23,"PRINTLNN":24,"RUNN":25,"EXP":26,"MAS":27,"MENOS":28,"MULT":29,"DIV":30,"POW":31,"MOD":32,"EQUALS":33,"NOTEQUAL":34,"MENOR":35,"MENOREQ":36,"MAYOR":37,"MAYOREQ":38,"OR":39,"AND":40,"NOT":41,"PAR1":42,"PAR2":43,"INCREMENT":44,"DECREMENT":45,"ID":46,"COR1":47,"COR2":48,"TOLOW":49,"TOUP":50,"ROUNDD":51,"LENGTHH":52,"TYPEOFF":53,"TOSTRINGG":54,"ENTERO":55,"DECIMAL":56,"TRUE":57,"FALSE":58,"CARACTER":59,"CADENA":60,"TIPOS":61,"INT":62,"DOUBLE":63,"BOOL":64,"CHAR":65,"STRING":66,"LISTD":67,"DEC2":68,"COMA":69,"IGUAL":70,"ASI":71,"VEC2":72,"DECV":73,"NEW":74,"DECV2":75,"LISTVEC":76,"TOCHARARRAYY":77,"MVEC2":78,"IF":79,"LLAVE1":80,"LLAVE2":81,"ELSE":82,"SWITCH":83,"LISTCASE":84,"SDEF":85,"CASE":86,"DOSPUNTOS":87,"DEFAULT":88,"WHILE":89,"FOR":90,"S_DEC_ASI":91,"ACTUALIZACION":92,"DO":93,"BREAK":94,"CONTINUE":95,"RETURN":96,"PARAMS":97,"VOID":98,"PARAMSCALL":99,"PRINT":100,"PRINTLN":101,"TOLOWER":102,"TOUPPER":103,"ROUND":104,"LENGTH":105,"VALENG":106,"TYPEOF":107,"TOSTRING":108,"TOCHARARRAY":109,"RUN":110,"LISTRUN":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PUNTOCOMA",27:"MAS",28:"MENOS",29:"MULT",30:"DIV",31:"POW",32:"MOD",33:"EQUALS",34:"NOTEQUAL",35:"MENOR",36:"MENOREQ",37:"MAYOR",38:"MAYOREQ",39:"OR",40:"AND",41:"NOT",42:"PAR1",43:"PAR2",44:"INCREMENT",45:"DECREMENT",46:"ID",47:"COR1",48:"COR2",55:"ENTERO",56:"DECIMAL",57:"TRUE",58:"FALSE",59:"CARACTER",60:"CADENA",62:"INT",63:"DOUBLE",64:"BOOL",65:"CHAR",66:"STRING",69:"COMA",70:"IGUAL",74:"NEW",79:"IF",80:"LLAVE1",81:"LLAVE2",82:"ELSE",83:"SWITCH",86:"CASE",87:"DOSPUNTOS",88:"DEFAULT",89:"WHILE",90:"FOR",93:"DO",94:"BREAK",95:"CONTINUE",96:"RETURN",98:"VOID",100:"PRINT",101:"PRINTLN",102:"TOLOWER",103:"TOUPPER",104:"ROUND",105:"LENGTH",107:"TYPEOF",108:"TOSTRING",109:"TOCHARARRAY",110:"RUN"},
productions_: [0,[3,2],[4,2],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,2],[26,2],[26,4],[26,7],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[61,1],[61,1],[61,1],[61,1],[61,1],[8,3],[67,3],[67,1],[68,1],[68,3],[71,4],[9,4],[10,6],[72,3],[72,1],[73,6],[73,4],[73,1],[75,1],[75,4],[76,3],[76,5],[76,3],[76,1],[11,7],[78,4],[78,1],[12,7],[12,11],[12,9],[13,8],[13,7],[13,7],[84,5],[84,4],[85,3],[14,7],[15,11],[91,1],[91,1],[92,1],[92,1],[16,9],[17,2],[18,2],[19,2],[19,3],[20,9],[20,8],[97,4],[97,2],[21,9],[21,8],[22,5],[22,4],[99,3],[99,1],[23,5],[24,5],[49,4],[50,4],[51,4],[52,4],[106,1],[106,4],[106,1],[53,4],[54,4],[77,5],[25,5],[25,6],[111,3],[111,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 4:
ListaErrores.push(new errores.default("Sintactico",yytext,_$[$0-1].first_line,_$[$0-1].first_column));
break;
case 20: case 21:
this.$=$$[$0];
break;
case 23:
this.$=new Aritmeticas.default(Aritmeticas.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 24:
this.$=new Aritmeticas.default(Aritmeticas.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 25:
this.$=new Aritmeticas.default(Aritmeticas.Operadores.MULT,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 26:
this.$=new Aritmeticas.default(Aritmeticas.Operadores.DIV,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 27:
this.$=new Aritmeticas.default(Aritmeticas.Operadores.POW,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 28:
this.$=new Aritmeticas.default(Aritmeticas.Operadores.MOD,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 29:
this.$=new Aritmeticas.default(Aritmeticas.Operadores.NEG,_$[$0-1].first_line,_$[$0-1].first_column,$$[$0]);
break;
case 51:
this.$=new Nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 52:
this.$=new Nativo.default(new Tipo.default(Tipo.tipoDato.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 53: case 54:
this.$=new Nativo.default(new Tipo.default(Tipo.tipoDato.BOOL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 55:
this.$=new Nativo.default(new Tipo.default(Tipo.tipoDato.CARACTER),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 56:
this.$=new Nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 115:
this.$=new Print.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 116:
this.$=new PrintLn.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{1:[3]},{5:[1,42],6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($Vj,[2,3]),{7:[1,44]},o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),{46:[1,46],67:45},{61:47,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7},{42:[1,49],47:[1,48]},{42:[1,50]},{42:[1,51]},{42:[1,52]},{42:[1,53]},{80:[1,54]},{7:[1,55]},{7:[1,56]},{7:[1,57],22:63,26:58,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{42:[1,82]},{42:[1,83]},{46:[1,84]},o($VA,[2,58]),o($VA,[2,59]),o($VA,[2,60]),o($VA,[2,61]),o($VA,[2,62]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,4]),{7:[1,87],68:85,69:[1,86],70:[1,88]},o($VB,$VC,{47:[1,89]}),{43:[1,90]},{22:63,26:91,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:96,28:$Vk,41:$Vl,42:$Vm,43:[1,93],46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,61:95,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,97:92,99:94,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:97,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:98,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:99,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{8:101,46:[1,104],61:103,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,71:102,91:100},{2:$V0,4:105,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($Vj,[2,101]),o($Vj,[2,102]),o($Vj,[2,103]),{7:[1,106],27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS},{22:63,26:123,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:124,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:125,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o([5,7,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,44,45,46,48,62,63,64,65,66,69,79,81,83,86,87,88,89,90,93,94,95,96,100,101,110],[2,57],{42:[1,127],47:[1,126]}),o($VT,[2,44]),o($VT,[2,45]),o($VT,[2,46]),o($VT,[2,47]),o($VT,[2,48]),o($VT,[2,49]),o($VT,[2,50]),o($VT,[2,51]),o($VT,[2,52]),o($VT,[2,53]),o($VT,[2,54]),o($VT,[2,55]),o($VT,[2,56]),{42:[1,128]},{42:[1,129]},{42:[1,130]},{42:[1,131]},{42:[1,132]},{42:[1,133]},{22:63,26:134,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:135,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{42:[1,136]},o($VU,[2,63]),{46:[1,137]},o($VU,[2,66]),{22:63,26:138,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{48:[1,139]},{22:63,26:140,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS,48:[1,141]},{43:[1,142],69:[1,143]},{7:$VV,87:[1,144]},{43:[1,146],69:[1,147]},{46:[1,148]},o($VW,[2,114],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS}),{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,149],44:$VR,45:$VS},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,150],44:$VR,45:$VS},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,151],44:$VR,45:$VS},{22:63,26:152,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($VX,[2,96]),o($VX,[2,97]),{46:[1,153],67:45},{70:[1,154]},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,155],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($Vj,[2,104]),{22:63,26:156,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:157,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:158,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:159,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:160,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:161,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:162,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:163,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:164,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:165,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:166,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:167,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:168,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:169,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($VT,[2,40]),o($VT,[2,41]),o([5,7,27,28,29,30,31,33,34,35,36,37,38,39,40,42,43,46,48,62,63,64,65,66,69,79,81,83,86,87,88,89,90,93,94,95,96,100,101,110],[2,29],{32:$VI,44:$VR,45:$VS}),o($VY,[2,38],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,44:$VR,45:$VS}),{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,170],44:$VR,45:$VS},{22:63,26:171,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:96,28:$Vk,41:$Vl,42:$Vm,43:[1,172],46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,99:94,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:173,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:174,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{56:[1,175]},{46:[1,177],60:[1,178],106:176},{22:63,26:179,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:180,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,181],44:$VR,45:$VS},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,182],44:$VR,45:$VS},{22:63,26:185,28:$Vk,41:$Vl,42:$Vm,43:[1,183],46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz,111:184},o($VB,[2,64]),{7:[1,186],27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS},{47:[1,188],70:[1,189],72:187},o($Vj,[2,69],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS}),{47:[1,191],70:[1,192],78:190},{87:[1,193]},{61:194,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7},{61:195,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,98:[1,196]},o($VT,[2,112]),{7:[1,197]},{22:63,26:198,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($VW,[2,108]),{80:[1,199]},{80:[1,200]},{80:[1,201]},{7:[1,202],27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS},o($VB,$VC),{22:63,26:203,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{89:[1,204]},o($VZ,[2,23],{29:$VF,30:$VG,31:$VH,32:$VI,44:$VR,45:$VS}),o($VZ,[2,24],{29:$VF,30:$VG,31:$VH,32:$VI,44:$VR,45:$VS}),o($V_,[2,25],{31:$VH,32:$VI,44:$VR,45:$VS}),o($V_,[2,26],{31:$VH,32:$VI,44:$VR,45:$VS}),o($V_,[2,27],{32:$VI,44:$VR,45:$VS}),o([5,7,42,43,46,48,62,63,64,65,66,69,79,81,83,86,87,88,89,90,93,94,95,96,100,101,110],[2,28],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS}),o($V$,[2,30],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,44:$VR,45:$VS}),o($V$,[2,31],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,44:$VR,45:$VS}),o($V$,[2,32],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,44:$VR,45:$VS}),o($V$,[2,33],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,44:$VR,45:$VS}),o($V$,[2,34],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,44:$VR,45:$VS}),o($V$,[2,35],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,44:$VR,45:$VS}),o([5,7,39,42,43,46,48,62,63,64,65,66,69,79,81,83,86,87,88,89,90,93,94,95,96,100,101,110],[2,36],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,40:$VQ,44:$VR,45:$VS}),o($VY,[2,37],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,44:$VR,45:$VS}),o($VT,[2,39]),{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS,48:[1,205]},{7:$VV},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,206],44:$VR,45:$VS},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,207],44:$VR,45:$VS},{43:[1,208]},{43:[1,209]},{43:[2,121],47:[1,210]},{43:[2,123]},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,211],44:$VR,45:$VS},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,212],44:$VR,45:$VS},{7:[1,213]},{7:[1,214]},{7:[1,215]},{43:[1,216],69:[1,217]},o($VW,[2,130],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS}),o($VU,[2,67]),{47:[1,220],73:218,74:[1,219],77:221,109:[1,222]},{48:[1,223]},o($V01,[2,72]),{22:63,26:224,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:225,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($VX,[2,84]),{61:226,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,98:[1,227]},{46:[1,228]},{80:[1,229]},{80:[1,230]},o($VT,[2,111]),o($VW,[2,113],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS}),{2:$V0,4:231,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{84:232,85:233,86:[1,234],88:$V11},{2:$V0,4:236,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{46:[1,237]},{7:[1,238],27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS},{42:[1,239]},o($VT,[2,42],{47:[1,240]}),o($VT,[2,117]),o($VT,[2,118]),o($VT,[2,119]),o($VT,[2,120]),{22:63,26:241,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($VT,[2,124]),o($VT,[2,125]),o($Vj,[2,115]),o($Vj,[2,116]),o($Vj,[2,127]),{7:[1,242]},{22:63,26:243,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($Vj,[2,70]),{61:244,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7},{22:63,26:247,28:$Vk,41:$Vl,42:$Vm,46:$Vn,47:$V21,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,76:245,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($Vj,[2,75]),{42:[1,248]},{70:[1,249]},{7:[1,250],27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS,48:[1,251]},{80:[1,252]},{80:[1,253]},o($VW,[2,107]),{2:$V0,4:254,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{2:$V0,4:255,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,256],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{81:[1,258],85:257,86:[1,259],88:$V11},{81:[1,260]},{22:63,26:261,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{87:[1,262]},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,263],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{44:[1,265],45:[1,266],92:264},o($VX,[2,68]),{22:63,26:267,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{22:63,26:268,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS,48:[1,269]},o($Vj,[2,128]),o($VW,[2,129],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS}),{47:[1,270]},{48:[1,271],69:$V31},{22:63,26:247,28:$Vk,41:$Vl,42:$Vm,46:$Vn,47:$V21,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,76:273,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($V41,[2,81],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS}),{60:[1,274]},o($V01,[2,71]),o($Vj,[2,82]),{70:[1,275]},{2:$V0,4:276,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{2:$V0,4:277,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,278],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,279],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($Vj,[2,85],{82:[1,280]}),{81:[1,281]},o($Vj,[2,89]),{22:63,26:282,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($Vj,[2,90]),{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS,87:[1,283]},{2:$V0,4:284,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($Vj,[2,94]),{43:[1,285]},{43:[2,98]},{43:[2,99]},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,43:[1,286],44:$VR,45:$VS},{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS,48:[1,287]},{43:[2,122]},{22:63,26:288,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{7:[1,289]},{22:63,26:290,28:$Vk,41:$Vl,42:$Vm,46:$Vn,47:[1,291],49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},{48:[1,292],69:$V31},{43:[1,293]},o($VX,[2,83]),{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,294],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,295],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($Vj,[2,106]),o($Vj,[2,110]),{12:297,79:$V8,80:[1,296]},o($Vj,[2,88]),{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS,87:[1,298]},{2:$V0,4:299,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[2,93],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},{80:[1,300]},{7:[1,301]},o($VT,[2,43]),{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS,48:[1,302]},o($Vj,[2,74]),o($V41,[2,78],{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS}),{22:63,26:247,28:$Vk,41:$Vl,42:$Vm,46:$Vn,47:$V21,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,76:303,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($V41,[2,80]),{7:[1,304]},o($Vj,[2,105]),o($Vj,[2,109]),{2:$V0,4:305,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($Vj,[2,87]),{2:$V0,4:306,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($V51,[2,92],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,61:23,6:43,42:$V1,46:$V2,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi}),{2:$V0,4:307,6:3,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($Vj,[2,100]),{7:[1,309],47:[1,310],75:308},{48:[1,311],69:$V31},o($Vj,[2,126]),{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,312],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($V51,[2,91],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,61:23,6:43,42:$V1,46:$V2,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi}),{6:43,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,42:$V1,46:$V2,61:23,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,313],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh,110:$Vi},o($Vj,[2,73]),o($Vj,[2,76]),{22:63,26:314,28:$Vk,41:$Vl,42:$Vm,46:$Vn,49:64,50:65,51:66,52:67,53:68,54:69,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,107:$Vy,108:$Vz},o($V41,[2,79]),o($Vj,[2,86]),o($Vj,[2,95]),{27:$VD,28:$VE,29:$VF,30:$VG,31:$VH,32:$VI,33:$VJ,34:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,44:$VR,45:$VS,48:[1,315]},{7:[1,316]},o($Vj,[2,77])],
defaultActions: {42:[2,1],178:[2,123],265:[2,98],266:[2,99],269:[2,122]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//CODIGO JS
const ListaErrores= require('../indexController').listaErrores;
const errores= require('./Excepciones/Errores');
const Tipo=require('./simbolo/Tipo')
const Nativo=require('./expresiones/Nativo')
const Aritmeticas=require('./expresiones/Aritmeticas')
const Print=require('./instrucciones/Print')
const PrintLn=require('./instrucciones/Println')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 62;
break;
case 1:return 63;
break;
case 2:return 64;
break;
case 3:return 65;
break;
case 4:return 66;
break;
case 5:return 74;
break;
case 6:return 79;
break;
case 7:return 82;
break;
case 8:return 83;
break;
case 9:return 86;
break;
case 10:return 94;
break;
case 11:return 88;
break;
case 12:return 89;
break;
case 13:return 90;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 96;
break;
case 17:return 100
break;
case 18:return 101;
break;
case 19:return 102;
break;
case 20:return 103;
break;
case 21:return 104;
break;
case 22:return 105;
break;
case 23:return 107;
break;
case 24:return 108;
break;
case 25:return 109;
break;
case 26:return 110;
break;
case 27:return 'NULL';
break;
case 28:return 57;
break;
case 29:return 58;
break;
case 30:return 98;
break;
case 31:
break;
case 32:
break;
case 33:return 33;
break;
case 34:return 34;
break;
case 35:return 36;
break;
case 36:return 38;
break;
case 37:return 39;
break;
case 38:return 40;
break;
case 39:return 44;
break;
case 40:return 45;
break;
case 41:return 30;
break;
case 42:return 31
break;
case 43:return 32;
break;
case 44:return 70;
break;
case 45:return 41;
break;
case 46:return 35;
break;
case 47:return 37;
break;
case 48:return 'TERNARIO';
break;
case 49:return 42;
break;
case 50:return 43;
break;
case 51:return 80;
break;
case 52:return 81;
break;
case 53:return 47;
break;
case 54:return 48;
break;
case 55:return 87;
break;
case 56:return 7;
break;
case 57:return 69;
break;
case 58:return 27;
break;
case 59:return 28;
break;
case 60:return 29;
break;
case 61:return 46;
break;
case 62:return 56;
break;
case 63:return 55;
break;
case 64:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 59;
break;
case 65:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 60;
break;
case 66:
break;
case 67:
break;
case 68:return 5;
break;
case 69:ListaErrores.push(new errores.default("Lexico","El caracter "+ yy_.yytext+" no pertenece al lenguaje",this._$.first_line,this._$.first_column));
break;
case 70:


break;
}
},
rules: [/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:(\/\/.*[^\n]))/i,/^(?:(\/\*([^*/]|[^*]\/|\*[^/])*\*\/))/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:[a-z][a-z0-9_]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:[\']([^\t\'\"\n]|(\\")|(\\n)|(\\')|(\\t)|(\\\\))?[\'])/i,/^(?:[\"]((\\")|[^\"\n])*[\"])/i,/^(?:[\ \r\t\f\t])/i,/^(?:[\ \n])/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}