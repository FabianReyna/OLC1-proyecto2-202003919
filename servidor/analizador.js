/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,23],$V2=[1,24],$V3=[1,35],$V4=[1,36],$V5=[1,37],$V6=[1,38],$V7=[1,39],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[5,24,41,45,62,63,64,65,66,79,80,81,83,86,88,89,90,93,94,95,96,100,101],$Vj=[1,56],$Vk=[1,57],$Vl=[1,58],$Vm=[1,59],$Vn=[1,68],$Vo=[1,69],$Vp=[1,70],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[42,45,46,80],$VB=[69,70,71],$VC=[2,65],$VD=[1,92],$VE=[1,94],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[1,117],$VT=[1,118],$VU=[1,119],$VV=[5,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,55,56,57,58,59,60,62,63,64,65,66,70,79,80,81,83,86,87,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],$VW=[5,24,27,40,41,45,55,56,57,58,59,60,62,63,64,65,66,79,80,81,83,86,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],$VX=[42,69],$VY=[27,40,41,45,55,56,57,58,59,60,102,103,104,105,107,108,109],$VZ=[5,24,26,28,29,30,32,33,34,35,36,37,38,39,40,41,42,45,47,55,56,57,58,59,60,62,63,64,65,66,70,79,80,81,83,86,87,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],$V_=[5,24,38,39,40,41,42,45,47,55,56,57,58,59,60,62,63,64,65,66,70,79,80,81,83,86,87,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],$V$=[1,180],$V01=[1,181],$V11=[5,24,26,28,29,32,33,34,35,36,37,38,39,40,41,42,45,47,55,56,57,58,59,60,62,63,64,65,66,70,79,80,81,83,86,87,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],$V21=[5,24,32,33,34,35,36,37,38,39,40,41,42,45,47,55,56,57,58,59,60,62,63,64,65,66,70,79,80,81,83,86,87,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],$V31=[46,71,75],$V41=[1,217],$V51=[40,41,45,47,55,56,57,58,59,60,102,103,104,105,107,108,109],$V61=[81,86,88];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"CAST":8,"VEC":9,"MVEC":10,"SIF":11,"SSWITCH":12,"CWHILE":13,"CFOR":14,"CDOW":15,"TBREAK":16,"TCONTINUE":17,"TRETURN":18,"FUNCS":19,"METODS":20,"LLAMADA":21,"PRINTT":22,"PRINTLNN":23,"INVALID":24,"EXP":25,"MAS":26,"MENOS":27,"MULT":28,"DIV":29,"POW":30,"MOD":31,"EQUALS":32,"NOTEQUAL":33,"MENOR":34,"MENOREQ":35,"MAYOR":36,"MAYOREQ":37,"OR":38,"AND":39,"NOT":40,"PAR1":41,"PAR2":42,"INCREMENT":43,"DECREMENT":44,"ID":45,"COR1":46,"COR2":47,"TOLOW":48,"TOUP":49,"ROUNDD":50,"LENGTHH":51,"TYPEOFF":52,"TOSTRINGG":53,"TOCHARARRAYY":54,"ENTERO":55,"DECIMAL":56,"TRUE":57,"FALSE":58,"CARACTER":59,"CADENA":60,"TIPOS":61,"INT":62,"DOUBLE":63,"BOOL":64,"CHAR":65,"STRING":66,"LISTD":67,"DEC2":68,"COMA":69,"PUNTOCOMA":70,"IGUAL":71,"ASI":72,"VEC2":73,"DECV":74,"NEW":75,"DECV2":76,"LISTVEC":77,"MVEC2":78,"IF":79,"LLAVE1":80,"LLAVE2":81,"ELSE":82,"SWITCH":83,"LISTCASE":84,"SDEF":85,"CASE":86,"DOSPUNTOS":87,"DEFAULT":88,"WHILE":89,"FOR":90,"S_DEC_ASI":91,"ACTUALIZACION":92,"DO":93,"BREAK":94,"CONTINUE":95,"RETURN":96,"PARAMS":97,"VOID":98,"PARAMSCALL":99,"PRINT":100,"PRINTLN":101,"TOLOWER":102,"TOUPPER":103,"ROUND":104,"LENGTH":105,"VALENG":106,"TYPEOF":107,"TOSTRING":108,"TOCHARARRAY":109,"RUNN":110,"RUN":111,"LISTRUN":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",24:"INVALID",26:"MAS",27:"MENOS",28:"MULT",29:"DIV",30:"POW",31:"MOD",32:"EQUALS",33:"NOTEQUAL",34:"MENOR",35:"MENOREQ",36:"MAYOR",37:"MAYOREQ",38:"OR",39:"AND",40:"NOT",41:"PAR1",42:"PAR2",43:"INCREMENT",44:"DECREMENT",45:"ID",46:"COR1",47:"COR2",55:"ENTERO",56:"DECIMAL",57:"TRUE",58:"FALSE",59:"CARACTER",60:"CADENA",62:"INT",63:"DOUBLE",64:"BOOL",65:"CHAR",66:"STRING",69:"COMA",70:"PUNTOCOMA",71:"IGUAL",75:"NEW",79:"IF",80:"LLAVE1",81:"LLAVE2",82:"ELSE",83:"SWITCH",86:"CASE",87:"DOSPUNTOS",88:"DEFAULT",89:"WHILE",90:"FOR",93:"DO",94:"BREAK",95:"CONTINUE",96:"RETURN",98:"VOID",100:"PRINT",101:"PRINTLN",102:"TOLOWER",103:"TOUPPER",104:"ROUND",105:"LENGTH",107:"TYPEOF",108:"TOSTRING",109:"TOCHARARRAY",111:"RUN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,3],[25,2],[25,2],[25,1],[25,4],[25,7],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[61,1],[61,1],[61,1],[61,1],[61,1],[7,3],[67,3],[67,1],[68,1],[68,3],[72,4],[8,4],[9,7],[73,3],[73,1],[74,6],[74,3],[76,1],[76,4],[77,2],[77,1],[10,8],[78,4],[78,1],[11,7],[11,11],[11,9],[12,8],[12,7],[12,7],[84,5],[84,4],[85,3],[13,7],[14,11],[91,1],[91,1],[92,1],[92,1],[15,9],[16,2],[17,2],[18,2],[18,2],[19,9],[97,4],[97,2],[20,9],[21,4],[21,3],[99,3],[99,1],[22,5],[23,5],[48,5],[49,5],[50,5],[51,5],[106,1],[106,4],[106,1],[52,5],[53,5],[54,5],[110,5],[110,6],[112,3],[112,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{1:[3]},{5:[1,40],6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),{45:[1,43],67:42},{61:44,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7},{41:[1,46],46:[1,45]},{41:[1,47]},{41:[1,48]},{41:[1,49]},{41:[1,50]},{80:[1,51]},{70:[1,52]},{70:[1,53]},{21:60,25:55,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,70:[1,54],102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{41:[1,81]},{41:[1,82]},o($VA,[2,58]),o($VA,[2,59]),o($VA,[2,60]),o($VA,[2,61]),o($VA,[2,62]),{1:[2,1]},o($Vi,[2,2]),{68:83,69:[1,84],70:[1,85],71:[1,86]},o($VB,$VC,{46:[1,87]}),{42:[1,88]},{21:60,25:89,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{42:$VD,45:$VE,61:93,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,97:90,99:91},{21:60,25:95,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:96,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:97,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{7:99,45:[1,102],61:101,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,72:100,91:98},{4:103,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},o($Vi,[2,98]),o($Vi,[2,99]),o($Vi,[2,100]),o($Vi,[2,101],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU}),{21:60,25:120,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:121,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:122,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},o([5,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,47,55,56,57,58,59,60,62,63,64,65,66,70,79,80,81,83,86,87,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],[2,41],{41:[1,124],46:[1,123]}),o($VV,[2,44]),o($VV,[2,45]),o($VV,[2,46]),o($VV,[2,47]),o($VV,[2,48]),o($VV,[2,49]),o($VV,[2,50]),o($VV,[2,51]),o($VV,[2,52]),o($VV,[2,53]),o($VV,[2,54]),o($VV,[2,55]),o($VV,[2,56]),o($VV,[2,57]),{41:[1,125]},{41:[1,126]},{41:[1,127]},{41:[1,128]},{41:[1,129]},{41:[1,130]},{41:[1,131]},{21:60,25:132,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:133,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},o($VW,[2,63]),{45:[1,134]},o($VW,[2,66]),{21:60,25:135,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{47:[1,136]},{21:60,25:137,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,47:[1,138]},{42:[1,139],69:[1,140]},{42:[1,141],69:[1,142]},o($VV,[2,107]),{45:[1,143]},o($VX,[2,109]),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,144],43:$VT,44:$VU},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,145],43:$VT,44:$VU},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,47:[1,146]},{21:60,25:147,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},o($VY,[2,93]),o($VY,[2,94]),{45:[1,148],67:42},{71:[1,149]},{6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,150],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{21:60,25:151,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:152,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:153,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:154,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:155,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:156,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:157,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:158,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:159,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:160,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:161,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:162,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:163,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:164,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},o($VV,[2,39]),o($VV,[2,40]),o($VZ,[2,28],{27:$VG,31:$VK,43:$VT,44:$VU}),o($V_,[2,37],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,43:$VT,44:$VU}),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,165],43:$VT,44:$VU},{21:60,25:166,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{42:$VD,45:$VE,99:91},{21:60,25:167,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:168,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{56:[1,169]},{45:[1,171],60:[1,172],106:170},{21:60,25:173,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:174,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:175,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,176],43:$VT,44:$VU},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,177],43:$VT,44:$VU},o($VB,[2,64]),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,70:[1,178]},{46:$V$,71:$V01,73:179},o($Vi,[2,69],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU}),{46:$V$,71:$V01,73:182},{87:[1,183]},{61:184,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7},o($VV,[2,106]),{45:[1,185]},o($VX,[2,104]),{80:[1,186]},{80:[1,187]},{80:[1,188]},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,70:[1,189]},o($VB,$VC),{21:60,25:190,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{89:[1,191]},o([5,24,26,32,33,34,35,36,37,38,39,40,41,42,45,47,55,56,57,58,59,60,62,63,64,65,66,70,79,80,81,83,86,87,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],[2,22],{27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,43:$VT,44:$VU}),o($VZ,[2,23],{27:$VG,31:$VK,43:$VT,44:$VU}),o($V11,[2,24],{27:$VG,30:$VJ,31:$VK,43:$VT,44:$VU}),o($V11,[2,25],{27:$VG,30:$VJ,31:$VK,43:$VT,44:$VU}),o($V11,[2,26],{27:$VG,31:$VK,43:$VT,44:$VU}),o([5,24,40,41,42,45,47,55,56,57,58,59,60,62,63,64,65,66,70,79,80,81,83,86,87,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],[2,27],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU}),o($V21,[2,29],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,43:$VT,44:$VU}),o($V21,[2,30],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,43:$VT,44:$VU}),o($V21,[2,31],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,43:$VT,44:$VU}),o($V21,[2,32],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,43:$VT,44:$VU}),o($V21,[2,33],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,43:$VT,44:$VU}),o($V21,[2,34],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,43:$VT,44:$VU}),o([5,24,38,40,41,42,45,47,55,56,57,58,59,60,62,63,64,65,66,70,79,80,81,83,86,87,88,89,90,93,94,95,96,100,101,102,103,104,105,107,108,109],[2,35],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,39:$VS,43:$VT,44:$VU}),o($V_,[2,36],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,43:$VT,44:$VU}),o($VV,[2,38]),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,47:[1,192]},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,193],43:$VT,44:$VU},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,194],43:$VT,44:$VU},{42:[1,195]},{42:[1,196]},{42:[2,116],46:[1,197]},{42:[2,118]},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,198],43:$VT,44:$VU},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,199],43:$VT,44:$VU},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,200],43:$VT,44:$VU},{70:[1,201]},{70:[1,202]},o($VW,[2,67]),{46:[1,205],74:203,75:[1,204]},{47:[1,206]},o($V31,[2,72]),{46:[1,208],71:[1,209],78:207},{61:210,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,98:[1,211]},{45:[1,212]},o($VX,[2,108]),{4:213,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{84:214,85:215,86:[1,216],88:$V41},{4:218,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{45:[1,219]},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,70:[1,220]},{41:[1,221]},o($VV,[2,42],{46:[1,222]}),{70:[1,223]},{70:[1,224]},{70:[1,225]},{70:[1,226]},{21:60,25:227,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{70:[1,228]},{70:[1,229]},{70:[1,230]},o($Vi,[2,110]),o($Vi,[2,111]),{70:[1,231]},{61:232,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7},{21:60,25:234,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,77:233,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{71:[1,235]},{21:60,25:236,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:237,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},o($VY,[2,81]),{80:[1,238]},{80:[1,239]},o($VX,[2,103]),{6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,240],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{81:[1,242],85:241,86:[1,243],88:$V41},{81:[1,244]},{21:60,25:245,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{87:[1,246]},{6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,247],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{43:[1,249],44:[1,250],92:248},o($VY,[2,68]),{21:60,25:251,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{21:60,25:252,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},o($VV,[2,112]),o($VV,[2,113]),o($VV,[2,114]),o($VV,[2,115]),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,47:[1,253]},o($VV,[2,119]),o($VV,[2,120]),o($VV,[2,121]),o($Vi,[2,70]),{46:[1,254]},{21:60,25:256,27:$Vj,40:$Vk,41:$Vl,45:$Vm,47:[1,255],48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},o($V51,[2,78],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU}),o($V31,[2,71]),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,70:[1,257]},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,47:[1,258]},{4:259,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{4:260,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},o($Vi,[2,82],{82:[1,261]}),{81:[1,262]},o($Vi,[2,86]),{21:60,25:263,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},o($Vi,[2,87]),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,87:[1,264]},{4:265,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},o($Vi,[2,91]),{42:[1,266]},{42:[2,95]},{42:[2,96]},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,42:[1,267],43:$VT,44:$VU},{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,47:[1,268]},{42:[2,117]},{21:60,25:269,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},{70:[2,74]},o($V51,[2,77],{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU}),o($Vi,[2,79]),{71:[1,270]},{6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,271],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,80:[1,272],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{11:274,79:$V8,80:[1,273]},o($Vi,[2,85]),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,87:[1,275]},{4:276,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[2,90],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{80:[1,277]},{70:[1,278]},o($VV,[2,43]),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,47:[1,279]},o($VY,[2,80]),o($Vi,[2,102]),o($Vi,[2,105]),{4:280,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},o($Vi,[2,84]),{4:281,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},o($V61,[2,89],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,61:22,6:41,24:$V0,41:$V1,45:$V2,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh}),{4:282,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},o($Vi,[2,97]),{46:[1,285],70:[1,284],76:283},{6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,286],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},o($V61,[2,88],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,61:22,6:41,24:$V0,41:$V1,45:$V2,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh}),{6:41,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:$V0,41:$V1,45:$V2,61:22,62:$V3,63:$V4,64:$V5,65:$V6,66:$V7,79:$V8,81:[1,287],83:$V9,89:$Va,90:$Vb,93:$Vc,94:$Vd,95:$Ve,96:$Vf,100:$Vg,101:$Vh},{70:[2,73]},{70:[2,75]},{21:60,25:288,27:$Vj,40:$Vk,41:$Vl,45:$Vm,48:61,49:62,50:63,51:64,52:65,53:66,54:67,55:$Vn,56:$Vo,57:$Vp,58:$Vq,59:$Vr,60:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,107:$Vx,108:$Vy,109:$Vz},o($Vi,[2,83]),o($Vi,[2,92]),{26:$VF,27:$VG,28:$VH,29:$VI,30:$VJ,31:$VK,32:$VL,33:$VM,34:$VN,35:$VO,36:$VP,37:$VQ,38:$VR,39:$VS,43:$VT,44:$VU,47:[1,289]},{70:[1,290]},{70:[2,76]}],
defaultActions: {40:[2,1],172:[2,118],249:[2,95],250:[2,96],253:[2,117],255:[2,74],283:[2,73],284:[2,75],290:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

//CODIGO JS
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 62;
break;
case 1:return 63;
break;
case 2:return 64;
break;
case 3:return 65;
break;
case 4:return 66;
break;
case 5:return 75;
break;
case 6:return 79;
break;
case 7:return 82;
break;
case 8:return 83;
break;
case 9:return 86;
break;
case 10:return 94;
break;
case 11:return 88;
break;
case 12:return 89;
break;
case 13:return 90;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 96;
break;
case 17:return 100
break;
case 18:return 101;
break;
case 19:return 102;
break;
case 20:return 103;
break;
case 21:return 104;
break;
case 22:return 105;
break;
case 23:return 107;
break;
case 24:return 108;
break;
case 25:return 109;
break;
case 26:return 111;
break;
case 27:return 'NULL';
break;
case 28:return 57;
break;
case 29:return 58;
break;
case 30:return 98;
break;
case 31:return 26;
break;
case 32:return 27;
break;
case 33:return 28;
break;
case 34:return 29;
break;
case 35:return 30
break;
case 36:return 31;
break;
case 37:return 71;
break;
case 38:return 40;
break;
case 39:return 34;
break;
case 40:return 36;
break;
case 41:return 'TERNARIO';
break;
case 42:return 41;
break;
case 43:return 42;
break;
case 44:return 80;
break;
case 45:return 81;
break;
case 46:return 46;
break;
case 47:return 47;
break;
case 48:return 87;
break;
case 49:return 70;
break;
case 50:return 69;
break;
case 51:return 32;
break;
case 52:return 33;
break;
case 53:return 35;
break;
case 54:return 37;
break;
case 55:return 38;
break;
case 56:return 39;
break;
case 57:return 43;
break;
case 58:return 44;
break;
case 59:return 45;
break;
case 60:return 55;
break;
case 61:return 56;
break;
case 62:return 59;
break;
case 63:return 60;
break;
case 64:
break;
case 65:
break;
case 66:
break;
case 67:
break;
case 68:return 5;
break;
case 69:return 24;
break;
}
},
rules: [/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:[a-z][a-z0-1_]*)/i,/^(?:[0-9]+)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[\']([^\t\'\"\n]|(\\")|(\\n)|(\\')|(\\t)|(\\\\))?[\'])/i,/^(?:[\"]((\\")|[^\"\n])*[\"])/i,/^(?:(\/\/.*[^\n]))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:[\ \r\t\f\t])/i,/^(?:[\ \n])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}