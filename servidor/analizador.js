/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,23],$V2=[1,24],$V3=[1,35],$V4=[1,36],$V5=[1,37],$V6=[1,38],$V7=[1,39],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[5,40,44,61,62,63,64,65,78,79,80,82,85,87,88,89,92,93,94,95,99,100],$Vj=[1,56],$Vk=[1,57],$Vl=[1,58],$Vm=[1,59],$Vn=[1,68],$Vo=[1,69],$Vp=[1,70],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[41,44,45,79],$VB=[68,69,70],$VC=[2,65],$VD=[1,92],$VE=[1,94],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[1,117],$VT=[1,118],$VU=[1,119],$VV=[5,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,54,55,56,57,58,59,61,62,63,64,65,69,78,79,80,82,85,86,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],$VW=[5,26,39,40,44,54,55,56,57,58,59,61,62,63,64,65,78,79,80,82,85,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],$VX=[41,68],$VY=[26,39,40,44,54,55,56,57,58,59,101,102,103,104,106,107,108],$VZ=[5,25,27,28,29,31,32,33,34,35,36,37,38,39,40,41,44,46,54,55,56,57,58,59,61,62,63,64,65,69,78,79,80,82,85,86,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],$V_=[5,37,38,39,40,41,44,46,54,55,56,57,58,59,61,62,63,64,65,69,78,79,80,82,85,86,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],$V$=[1,180],$V01=[1,181],$V11=[5,25,27,28,31,32,33,34,35,36,37,38,39,40,41,44,46,54,55,56,57,58,59,61,62,63,64,65,69,78,79,80,82,85,86,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],$V21=[5,31,32,33,34,35,36,37,38,39,40,41,44,46,54,55,56,57,58,59,61,62,63,64,65,69,78,79,80,82,85,86,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],$V31=[45,70,74],$V41=[1,217],$V51=[39,40,44,46,54,55,56,57,58,59,101,102,103,104,106,107,108],$V61=[80,85,87];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"CAST":8,"VEC":9,"MVEC":10,"SIF":11,"SSWITCH":12,"CWHILE":13,"CFOR":14,"CDOW":15,"TBREAK":16,"TCONTINUE":17,"TRETURN":18,"FUNCS":19,"METODS":20,"LLAMADA":21,"PRINTT":22,"PRINTLNN":23,"EXP":24,"MAS":25,"MENOS":26,"MULT":27,"DIV":28,"POW":29,"MOD":30,"EQUALS":31,"NOTEQUAL":32,"MENOR":33,"MENOREQ":34,"MAYOR":35,"MAYOREQ":36,"OR":37,"AND":38,"NOT":39,"PAR1":40,"PAR2":41,"INCREMENT":42,"DECREMENT":43,"ID":44,"COR1":45,"COR2":46,"TOLOW":47,"TOUP":48,"ROUNDD":49,"LENGTHH":50,"TYPEOFF":51,"TOSTRINGG":52,"TOCHARARRAYY":53,"ENTERO":54,"DECIMAL":55,"TRUE":56,"FALSE":57,"CARACTER":58,"CADENA":59,"TIPOS":60,"INT":61,"DOUBLE":62,"BOOL":63,"CHAR":64,"STRING":65,"LISTD":66,"DEC2":67,"COMA":68,"PUNTOCOMA":69,"IGUAL":70,"ASI":71,"VEC2":72,"DECV":73,"NEW":74,"DECV2":75,"LISTVEC":76,"MVEC2":77,"IF":78,"LLAVE1":79,"LLAVE2":80,"ELSE":81,"SWITCH":82,"LISTCASE":83,"SDEF":84,"CASE":85,"DOSPUNTOS":86,"DEFAULT":87,"WHILE":88,"FOR":89,"S_DEC_ASI":90,"ACTUALIZACION":91,"DO":92,"BREAK":93,"CONTINUE":94,"RETURN":95,"PARAMS":96,"VOID":97,"PARAMSCALL":98,"PRINT":99,"PRINTLN":100,"TOLOWER":101,"TOUPPER":102,"ROUND":103,"LENGTH":104,"VALENG":105,"TYPEOF":106,"TOSTRING":107,"TOCHARARRAY":108,"RUNN":109,"RUN":110,"LISTRUN":111,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",25:"MAS",26:"MENOS",27:"MULT",28:"DIV",29:"POW",30:"MOD",31:"EQUALS",32:"NOTEQUAL",33:"MENOR",34:"MENOREQ",35:"MAYOR",36:"MAYOREQ",37:"OR",38:"AND",39:"NOT",40:"PAR1",41:"PAR2",42:"INCREMENT",43:"DECREMENT",44:"ID",45:"COR1",46:"COR2",54:"ENTERO",55:"DECIMAL",56:"TRUE",57:"FALSE",58:"CARACTER",59:"CADENA",61:"INT",62:"DOUBLE",63:"BOOL",64:"CHAR",65:"STRING",68:"COMA",69:"PUNTOCOMA",70:"IGUAL",74:"NEW",78:"IF",79:"LLAVE1",80:"LLAVE2",81:"ELSE",82:"SWITCH",85:"CASE",86:"DOSPUNTOS",87:"DEFAULT",88:"WHILE",89:"FOR",92:"DO",93:"BREAK",94:"CONTINUE",95:"RETURN",97:"VOID",99:"PRINT",100:"PRINTLN",101:"TOLOWER",102:"TOUPPER",103:"ROUND",104:"LENGTH",106:"TYPEOF",107:"TOSTRING",108:"TOCHARARRAY",110:"RUN"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,2],[24,2],[24,1],[24,4],[24,7],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[60,1],[60,1],[60,1],[60,1],[60,1],[7,3],[66,3],[66,1],[67,1],[67,3],[71,4],[8,4],[9,7],[72,3],[72,1],[73,6],[73,3],[75,1],[75,4],[76,2],[76,1],[10,8],[77,4],[77,1],[11,7],[11,11],[11,9],[12,8],[12,7],[12,7],[83,5],[83,4],[84,3],[13,7],[14,11],[90,1],[90,1],[91,1],[91,1],[15,9],[16,2],[17,2],[18,2],[18,2],[19,9],[96,4],[96,2],[20,9],[21,4],[21,3],[98,3],[98,1],[22,5],[23,5],[47,5],[48,5],[49,5],[50,5],[105,1],[105,4],[105,1],[51,5],[52,5],[53,5],[109,5],[109,6],[111,3],[111,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
ListaErrores.agregarError("Sintactico",yytext,_$[$0].first_line,_$[$0].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{1:[3]},{5:[1,40],6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),{44:[1,43],66:42},{60:44,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7},{40:[1,46],45:[1,45]},{40:[1,47]},{40:[1,48]},{40:[1,49]},{40:[1,50]},{79:[1,51]},{69:[1,52]},{69:[1,53]},{21:60,24:55,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,69:[1,54],101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{40:[1,81]},{40:[1,82]},o($VA,[2,58]),o($VA,[2,59]),o($VA,[2,60]),o($VA,[2,61]),o($VA,[2,62]),{1:[2,1]},o($Vi,[2,2]),{67:83,68:[1,84],69:[1,85],70:[1,86]},o($VB,$VC,{45:[1,87]}),{41:[1,88]},{21:60,24:89,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{41:$VD,44:$VE,60:93,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,96:90,98:91},{21:60,24:95,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:96,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:97,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{7:99,44:[1,102],60:101,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,71:100,90:98},{2:$V0,4:103,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},o($Vi,[2,98]),o($Vi,[2,99]),o($Vi,[2,100]),o($Vi,[2,101],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU}),{21:60,24:120,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:121,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:122,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},o([5,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,46,54,55,56,57,58,59,61,62,63,64,65,69,78,79,80,82,85,86,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],[2,41],{40:[1,124],45:[1,123]}),o($VV,[2,44]),o($VV,[2,45]),o($VV,[2,46]),o($VV,[2,47]),o($VV,[2,48]),o($VV,[2,49]),o($VV,[2,50]),o($VV,[2,51]),o($VV,[2,52]),o($VV,[2,53]),o($VV,[2,54]),o($VV,[2,55]),o($VV,[2,56]),o($VV,[2,57]),{40:[1,125]},{40:[1,126]},{40:[1,127]},{40:[1,128]},{40:[1,129]},{40:[1,130]},{40:[1,131]},{21:60,24:132,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:133,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},o($VW,[2,63]),{44:[1,134]},o($VW,[2,66]),{21:60,24:135,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{46:[1,136]},{21:60,24:137,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,46:[1,138]},{41:[1,139],68:[1,140]},{41:[1,141],68:[1,142]},o($VV,[2,107]),{44:[1,143]},o($VX,[2,109]),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,144],42:$VT,43:$VU},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,145],42:$VT,43:$VU},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,46:[1,146]},{21:60,24:147,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},o($VY,[2,93]),o($VY,[2,94]),{44:[1,148],66:42},{70:[1,149]},{6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,80:[1,150],82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{21:60,24:151,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:152,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:153,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:154,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:155,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:156,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:157,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:158,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:159,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:160,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:161,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:162,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:163,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:164,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},o($VV,[2,39]),o($VV,[2,40]),o($VZ,[2,28],{26:$VG,30:$VK,42:$VT,43:$VU}),o($V_,[2,37],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,42:$VT,43:$VU}),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,165],42:$VT,43:$VU},{21:60,24:166,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{41:$VD,44:$VE,98:91},{21:60,24:167,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:168,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{55:[1,169]},{44:[1,171],59:[1,172],105:170},{21:60,24:173,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:174,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:175,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,176],42:$VT,43:$VU},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,177],42:$VT,43:$VU},o($VB,[2,64]),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,69:[1,178]},{45:$V$,70:$V01,72:179},o($Vi,[2,69],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU}),{45:$V$,70:$V01,72:182},{86:[1,183]},{60:184,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7},o($VV,[2,106]),{44:[1,185]},o($VX,[2,104]),{79:[1,186]},{79:[1,187]},{79:[1,188]},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,69:[1,189]},o($VB,$VC),{21:60,24:190,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{88:[1,191]},o([5,25,31,32,33,34,35,36,37,38,39,40,41,44,46,54,55,56,57,58,59,61,62,63,64,65,69,78,79,80,82,85,86,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],[2,22],{26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,42:$VT,43:$VU}),o($VZ,[2,23],{26:$VG,30:$VK,42:$VT,43:$VU}),o($V11,[2,24],{26:$VG,29:$VJ,30:$VK,42:$VT,43:$VU}),o($V11,[2,25],{26:$VG,29:$VJ,30:$VK,42:$VT,43:$VU}),o($V11,[2,26],{26:$VG,30:$VK,42:$VT,43:$VU}),o([5,39,40,41,44,46,54,55,56,57,58,59,61,62,63,64,65,69,78,79,80,82,85,86,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],[2,27],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU}),o($V21,[2,29],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,42:$VT,43:$VU}),o($V21,[2,30],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,42:$VT,43:$VU}),o($V21,[2,31],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,42:$VT,43:$VU}),o($V21,[2,32],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,42:$VT,43:$VU}),o($V21,[2,33],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,42:$VT,43:$VU}),o($V21,[2,34],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,42:$VT,43:$VU}),o([5,37,39,40,41,44,46,54,55,56,57,58,59,61,62,63,64,65,69,78,79,80,82,85,86,87,88,89,92,93,94,95,99,100,101,102,103,104,106,107,108],[2,35],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,38:$VS,42:$VT,43:$VU}),o($V_,[2,36],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,42:$VT,43:$VU}),o($VV,[2,38]),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,46:[1,192]},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,193],42:$VT,43:$VU},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,194],42:$VT,43:$VU},{41:[1,195]},{41:[1,196]},{41:[2,116],45:[1,197]},{41:[2,118]},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,198],42:$VT,43:$VU},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,199],42:$VT,43:$VU},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,200],42:$VT,43:$VU},{69:[1,201]},{69:[1,202]},o($VW,[2,67]),{45:[1,205],73:203,74:[1,204]},{46:[1,206]},o($V31,[2,72]),{45:[1,208],70:[1,209],77:207},{60:210,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,97:[1,211]},{44:[1,212]},o($VX,[2,108]),{2:$V0,4:213,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{83:214,84:215,85:[1,216],87:$V41},{2:$V0,4:218,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{44:[1,219]},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,69:[1,220]},{40:[1,221]},o($VV,[2,42],{45:[1,222]}),{69:[1,223]},{69:[1,224]},{69:[1,225]},{69:[1,226]},{21:60,24:227,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{69:[1,228]},{69:[1,229]},{69:[1,230]},o($Vi,[2,110]),o($Vi,[2,111]),{69:[1,231]},{60:232,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7},{21:60,24:234,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,76:233,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{70:[1,235]},{21:60,24:236,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:237,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},o($VY,[2,81]),{79:[1,238]},{79:[1,239]},o($VX,[2,103]),{6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,80:[1,240],82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{80:[1,242],84:241,85:[1,243],87:$V41},{80:[1,244]},{21:60,24:245,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{86:[1,246]},{6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,80:[1,247],82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{42:[1,249],43:[1,250],91:248},o($VY,[2,68]),{21:60,24:251,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{21:60,24:252,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},o($VV,[2,112]),o($VV,[2,113]),o($VV,[2,114]),o($VV,[2,115]),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,46:[1,253]},o($VV,[2,119]),o($VV,[2,120]),o($VV,[2,121]),o($Vi,[2,70]),{45:[1,254]},{21:60,24:256,26:$Vj,39:$Vk,40:$Vl,44:$Vm,46:[1,255],47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},o($V51,[2,78],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU}),o($V31,[2,71]),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,69:[1,257]},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,46:[1,258]},{2:$V0,4:259,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{2:$V0,4:260,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},o($Vi,[2,82],{81:[1,261]}),{80:[1,262]},o($Vi,[2,86]),{21:60,24:263,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},o($Vi,[2,87]),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,86:[1,264]},{2:$V0,4:265,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},o($Vi,[2,91]),{41:[1,266]},{41:[2,95]},{41:[2,96]},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,41:[1,267],42:$VT,43:$VU},{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,46:[1,268]},{41:[2,117]},{21:60,24:269,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},{69:[2,74]},o($V51,[2,77],{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU}),o($Vi,[2,79]),{70:[1,270]},{6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,80:[1,271],82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,79:[1,272],82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{11:274,78:$V8,79:[1,273]},o($Vi,[2,85]),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,86:[1,275]},{2:$V0,4:276,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,80:[2,90],82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{79:[1,277]},{69:[1,278]},o($VV,[2,43]),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,46:[1,279]},o($VY,[2,80]),o($Vi,[2,102]),o($Vi,[2,105]),{2:$V0,4:280,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},o($Vi,[2,84]),{2:$V0,4:281,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},o($V61,[2,89],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,60:22,6:41,40:$V1,44:$V2,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh}),{2:$V0,4:282,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},o($Vi,[2,97]),{45:[1,285],69:[1,284],75:283},{6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,80:[1,286],82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},o($V61,[2,88],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,60:22,6:41,40:$V1,44:$V2,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh}),{6:41,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,40:$V1,44:$V2,60:22,61:$V3,62:$V4,63:$V5,64:$V6,65:$V7,78:$V8,80:[1,287],82:$V9,88:$Va,89:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,99:$Vg,100:$Vh},{69:[2,73]},{69:[2,75]},{21:60,24:288,26:$Vj,39:$Vk,40:$Vl,44:$Vm,47:61,48:62,49:63,50:64,51:65,52:66,53:67,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,106:$Vx,107:$Vy,108:$Vz},o($Vi,[2,83]),o($Vi,[2,92]),{25:$VF,26:$VG,27:$VH,28:$VI,29:$VJ,30:$VK,31:$VL,32:$VM,33:$VN,34:$VO,35:$VP,36:$VQ,37:$VR,38:$VS,42:$VT,43:$VU,46:[1,289]},{69:[1,290]},{69:[2,76]}],
defaultActions: {40:[2,1],172:[2,118],249:[2,95],250:[2,96],253:[2,117],255:[2,74],283:[2,73],284:[2,75],290:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//CODIGO JS
const ListaErrores = require("./errores").ListaErrores
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 61;
break;
case 1:return 62;
break;
case 2:return 63;
break;
case 3:return 64;
break;
case 4:return 65;
break;
case 5:return 74;
break;
case 6:return 78;
break;
case 7:return 81;
break;
case 8:return 82;
break;
case 9:return 85;
break;
case 10:return 93;
break;
case 11:return 87;
break;
case 12:return 88;
break;
case 13:return 89;
break;
case 14:return 92;
break;
case 15:return 94;
break;
case 16:return 95;
break;
case 17:return 99
break;
case 18:return 100;
break;
case 19:return 101;
break;
case 20:return 102;
break;
case 21:return 103;
break;
case 22:return 104;
break;
case 23:return 106;
break;
case 24:return 107;
break;
case 25:return 108;
break;
case 26:return 110;
break;
case 27:return 'NULL';
break;
case 28:return 56;
break;
case 29:return 57;
break;
case 30:return 97;
break;
case 31:return 25;
break;
case 32:return 26;
break;
case 33:return 27;
break;
case 34:
break;
case 35:
break;
case 36:return 31;
break;
case 37:return 32;
break;
case 38:return 34;
break;
case 39:return 36;
break;
case 40:return 37;
break;
case 41:return 38;
break;
case 42:return 42;
break;
case 43:return 43;
break;
case 44:return 28;
break;
case 45:return 29
break;
case 46:return 30;
break;
case 47:return 70;
break;
case 48:return 39;
break;
case 49:return 33;
break;
case 50:return 35;
break;
case 51:return 'TERNARIO';
break;
case 52:return 40;
break;
case 53:return 41;
break;
case 54:return 79;
break;
case 55:return 80;
break;
case 56:return 45;
break;
case 57:return 46;
break;
case 58:return 86;
break;
case 59:return 69;
break;
case 60:return 68;
break;
case 61:return 44;
break;
case 62:return 55;
break;
case 63:return 54;
break;
case 64:return 58;
break;
case 65:return 59;
break;
case 66:
break;
case 67:
break;
case 68:return 5;
break;
case 69:ListaErrores.agregarError("Lexico","El caracter "+ yy_.yytext+" no pertenece al lenguaje",yy_.yylloc.first_line,yy_.yylloc.first_column)
break;
case 70:


break;
}
},
rules: [/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:(\/\/.*[^\n]))/i,/^(?:(\/\*([^*/]|[^*]\/|\*[^/])*\*\/))/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:[a-z][a-z0-1_]*)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:[\']([^\t\'\"\n]|(\\")|(\\n)|(\\')|(\\t)|(\\\\))?[\'])/i,/^(?:[\"]((\\")|[^\"\n])*[\"])/i,/^(?:[\ \r\t\f\t])/i,/^(?:[\ \n])/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}